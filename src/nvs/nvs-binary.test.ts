/**
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, it, expect } from "vitest";
import { NVSPartition } from "./nvs-partition";
import * as fs from "fs";
import * as path from "path";
import { parse } from "csv-parse/sync";

describe("NVS Binary Generation from CSV", () => {
  it("should generate a binary identical to the one generated by the Python tool", () => {
    // 1. Load the CSV file
    const csvPath = path.resolve(__dirname, "binary-test/sample_0x6000.csv");
    const csvContent = fs.readFileSync(csvPath, "utf-8");
    const records = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      comment: "#", // Ignore lines starting with #
    });

    // 2. Create and populate the NVSPartition from the CSV data
    const nvsPartition = new NVSPartition(0x9000, "nvs_partition", 0x6000); // Set size to 0x6000 as per your spec

    let currentNamespace = "";
    for (const record of records) {
      if (record.type === "namespace") {
        currentNamespace = record.key;
      } else if (record.type === "data") {
        let value: string | number = record.value;
        switch (record.encoding) {
          case "u8":
          case "i8":
          case "u16":
          case "i16":
          case "u32":
          case "i32":
            value = Number(record.value);
            break;
        }
        nvsPartition.writeEntry(currentNamespace, record.key, value);
      }
    }

    // 3. Get the generated binary from the TypeScript implementation
    const tsBinary = nvsPartition.binary;

    // 4. Load the pre-generated binary from the Python tool
    const pythonBinaryPath = path.resolve(
      __dirname,
      "binary-test/sample_0x6000.bin",
    );
    const pythonBinary = new Uint8Array(
      fs.readFileSync(pythonBinaryPath).buffer,
    );

    // 5. Compare the two binaries
    expect(tsBinary).toEqual(pythonBinary);
  });
});
